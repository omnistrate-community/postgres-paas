# yaml-language-server: $schema=https://api.omnistrate.cloud/2022-09-01-00/schema/service-spec-schema.json
name: PostgreSQL Server # Service Plan Name
deployment:
  hostedDeployment:
    AwsAccountId: "533267314642"
    AWSBootstrapRoleAccountArn: "arn:aws:iam::533267314642:role/omnistrate-bootstrap-role"
tenancyType: OMNISTRATE_CUSTOM_TENANCY
features:
  INTERNAL:
    logs: # Omnistrate native
  CUSTOMER:
    logs: # Omnistrate native

services:
  - name: CNPG
    compute:
      instanceTypes:
        - apiParam: instanceType
          cloudProvider: aws
    apiParameters:
      - key: instanceType
        description: Instance Type
        name: Instance Type
        type: String
        modifiable: true
        required: false
        export: true
        defaultValue: "t3.medium"
      - key: postgresqlPassword
        description: Default DB Password
        name: Password
        type: Password
        modifiable: false
        required: true
        export: true
      - key: postgresqlUsername
        description: Username
        name: Default DB Username
        type: String
        modifiable: false
        required: false
        export: true
        defaultValue: "app"
      - key: postgresqlDatabase
        description: Default Database Name
        name: Default Database Name
        type: String
        modifiable: false
        required: false
        export: true
        defaultValue: "app"
      - key: numberOfInstances
        description: Total Number of Instances
        name: Total Number of Instances
        type: Float64
        modifiable: true
        required: false
        export: true
        defaultValue: "1"
        limits:
          min: 1
      - key: storageSize
        description: Storage size for PostgreSQL data
        name: Storage Size
        type: String
        modifiable: true
        required: false
        export: true
        defaultValue: "20Gi"
    endpointConfiguration:
      writer:
        host: "$sys.network.externalClusterEndpoint"
        ports:
          - 5432
        primary: true
        networkingType: PUBLIC
      reader:
        host: "reader-{{ $sys.network.externalClusterEndpoint }}"
        ports:
          - 5432
        primary: false
        networkingType: PUBLIC
    operatorCRDConfiguration:
      template: |
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: {{ $sys.id }}
        spec:
          enablePDB: true
          bootstrap:
            initdb:
              owner: {{ $var.postgresqlUsername }}
              database: {{ $var.postgresqlDatabase }}
              secret:
                name: basic-auth
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                    - key: omnistrate.com/managed-by
                      operator: In
                      values:
                      - omnistrate
                    - key: topology.kubernetes.io/region
                      operator: In
                      values:
                      - {{ $sys.deploymentCell.region }}
                    - key: node.kubernetes.io/instance-type
                      operator: In
                      values:
                      - {{ $sys.compute.node.instanceType }}
                    - key: omnistrate.com/resource
                      operator: In
                      values:
                      - {{ $sys.deployment.resourceID }}
          instances: {{ $var.numberOfInstances }}
          storage:
            resizeInUseVolumes: true
            size: {{ $var.storageSize }}
            storageClass: gp3
          managed:
            services:
              additional:
                - selectorType: ro
                  serviceTemplate:
                    metadata:
                      name: "{{ $sys.id }}-cluster-ro"
                      annotations:
                          external-dns.alpha.kubernetes.io/hostname: reader-{{ $sys.network.externalClusterEndpoint }}
                          external-dns.alpha.kubernetes.io/ttl: "60"
                          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: omnistrate.com/resource={{ $sys.deployment.resourceID }},omnistrate.com/instance={{ $sys.id }},omnistrate.com/managed-by=omnistrate
                          service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: "false"
                          service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
                          service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
                          service.beta.kubernetes.io/aws-load-balancer-subnets: "{{ $sys.deploymentCell.publicSubnetIDs[*].id }}"
                          service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true
                          service.beta.kubernetes.io/aws-load-balancer-target-node-labels: omnistrate.com/managed-by=omnistrate
                          service.beta.kubernetes.io/aws-load-balancer-type: external
                          service.beta.kubernetes.io/load-balancer-source-ranges: 0.0.0.0/0
                          service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
                    spec:
                      type: LoadBalancer
                  updateStrategy: patch
                - selectorType: rw
                  serviceTemplate:
                    metadata:
                      name: "{{ $sys.id }}-cluster-rw"
                      annotations:
                          external-dns.alpha.kubernetes.io/hostname: {{ $sys.network.externalClusterEndpoint }}
                          external-dns.alpha.kubernetes.io/ttl: "60"
                          service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: omnistrate.com/resource={{ $sys.deployment.resourceID }},omnistrate.com/instance={{ $sys.id }},omnistrate.com/managed-by=omnistrate
                          service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: "false"
                          service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
                          service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
                          service.beta.kubernetes.io/aws-load-balancer-subnets: "{{ $sys.deploymentCell.publicSubnetIDs[*].id }}"
                          service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true
                          service.beta.kubernetes.io/aws-load-balancer-target-node-labels: omnistrate.com/managed-by=omnistrate
                          service.beta.kubernetes.io/aws-load-balancer-type: external
                          service.beta.kubernetes.io/load-balancer-source-ranges: 0.0.0.0/0
                          service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
                    spec:
                      type: LoadBalancer
                  updateStrategy: patch
      supplementalFiles:
        - |
          # Basic auth using parameters
          apiVersion: v1
          kind: Secret
          metadata:
            name: basic-auth
            namespace: {{ $sys.id }}
          type: kubernetes.io/basic-auth
          data:
            username: {{ $func.base64encode($var.postgresqlUsername) }}
            password: {{ $func.base64encode($var.postgresqlPassword) }}
      readinessConditions:
        "$var._crd.status.phase": "Cluster in healthy state"
        '$var._crd.status.conditions[?(@.type=="Ready")].status': "True"

      outputParameters:
        "Postgres Container Image": "$var._crd.status.image"
        "Status": "$var._crd.status.phase"
        "Topology": "$var._crd.status.topology"

      helmChartDependencies:
        - chartName: cloudnative-pg
          chartVersion: 0.26.0
          chartRepoName: cnpg
          chartRepoURL: https://cloudnative-pg.github.io/charts